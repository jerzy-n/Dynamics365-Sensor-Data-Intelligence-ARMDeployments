{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Check_If_Last_Point_Is_Anomaly": {
        "inputs": {
          "authentication": "@parameters('AnomalyDetectorIdentityAuthentication')",
          "body": "@body('Parse_Content_of_the_Message')",
          "headers": {
            "Content-Type": "application/json"
          },
          "method": "POST",
          "uri": "@{parameters('AnomalyDetectionEndpoint')}anomalydetector/v1.1/timeseries/last/detect"
        },
        "runAfter": {
          "Parse_Content_of_the_Message": [
            "Succeeded"
          ]
        },
        "type": "Http"
      },
      "If_Status_Code_Is_200": {
        "actions": {
          "Complete_the_message_in_a_queue": {
            "inputs": {
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['servicebus']['connectionId']"
                }
              },
              "method": "delete",
              "path": "/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/complete",
              "queries": {
                "lockToken": "@triggerBody()?['LockToken']",
                "queueType": "Main",
                "sessionId": ""
              }
            },
            "runAfter": {
              "If_Anomaly_Is_Found": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "If_Anomaly_Is_Found": {
            "actions": {
              "Send_message": {
                "inputs": {
                  "body": {
                    "ContentData": "@{base64(concat('{ \"notificationType\": \"Anomaly: ',body('Parse_Content_of_the_Message')?['sensorId'],', Severity: ',body('Parse_Response_From_Anomaly_Detector')?['severity'],', IsPositiveAnomaly: ',body('Parse_Response_From_Anomaly_Detector')['isPositiveAnomaly'],', IsNegativeAnomaly: ',body('Parse_Response_From_Anomaly_Detector')['isNegativeAnomaly'],', ExpectedValue: ',body('Parse_Response_From_Anomaly_Detector')['expectedValue'],', LowerMargin: ',body('Parse_Response_From_Anomaly_Detector')['lowerMargin'],', UpperMargin: ',body('Parse_Response_From_Anomaly_Detector')['upperMargin'],', SuggestedWindow: ',body('Parse_Response_From_Anomaly_Detector')['suggestedWindow'],', Period: ',body('Parse_Response_From_Anomaly_Detector')['period'],'\", \"timestamp\": \"',body('Parse_Content_of_the_Message')?['processingTimestamp'],'\" }'))}"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['servicebus']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages",
                  "queries": {
                    "systemProperties": "None"
                  }
                },
                "runAfter": {},
                "type": "ApiConnection"
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@body('Parse_Response_From_Anomaly_Detector')['isAnomaly']",
                    "@true"
                  ]
                }
              ]
            },
            "runAfter": {
              "Parse_Response_From_Anomaly_Detector": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Parse_Response_From_Anomaly_Detector": {
            "inputs": {
              "content": "@body('Check_If_Last_Point_Is_Anomaly')",
              "schema": {
                "properties": {
                  "expectedValue": {
                    "description": "Expected value of the latest point.",
                    "format": "float",
                    "type": "number"
                  },
                  "isAnomaly": {
                    "description": "Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.",
                    "type": "boolean"
                  },
                  "isNegativeAnomaly": {
                    "description": "Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.",
                    "type": "boolean"
                  },
                  "isPositiveAnomaly": {
                    "description": "Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.",
                    "type": "boolean"
                  },
                  "lowerMargin": {
                    "description": "Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. ",
                    "format": "float",
                    "type": "number"
                  },
                  "period": {
                    "description": "Frequency extracted from the series, zero means no recurrent pattern has been found.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "severity": {
                    "description": "The severity score for the last input point. The larger the value is, the more sever the anomaly is. For normal points, the \"severity\" is always 0.",
                    "format": "float",
                    "type": "number"
                  },
                  "suggestedWindow": {
                    "description": "Suggested input series points needed for detecting the latest point.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "upperMargin": {
                    "description": "Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed.",
                    "format": "float",
                    "type": "number"
                  }
                },
                "required": [
                  "expectedValue",
                  "isAnomaly",
                  "isNegativeAnomaly",
                  "isPositiveAnomaly",
                  "lowerMargin",
                  "period",
                  "upperMargin",
                  "suggestedWindow"
                ],
                "type": "object"
              }
            },
            "runAfter": {},
            "type": "ParseJson"
          }
        },
        "else": {
          "actions": {
            "Abandon_the_message_in_a_queue": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/abandon",
                "queries": {
                  "lockToken": "@triggerBody()?['LockToken']",
                  "queueType": "Main",
                  "sessionId": ""
                }
              },
              "runAfter": {},
              "type": "ApiConnection"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@outputs('Check_If_Last_Point_Is_Anomaly')['statusCode']",
                200
              ]
            }
          ]
        },
        "runAfter": {
          "Check_If_Last_Point_Is_Anomaly": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Parse_Content_of_the_Message": {
        "inputs": {
          "content": "@decodeBase64(triggerBody()['ContentData'])",
          "schema": {
            "properties": {
              "processingTimestamp": {
                "type": "string"
              },
              "sensorId": {
                "type": "string"
              },
              "series": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "timestamp",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "runAfter": {},
        "type": "ParseJson"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      },
      "AnomalyDetectionEndpoint": {
        "defaultValue": "",
        "type": "String"
      },
      "AnomalyDetectorIdentityAuthentication": {
        "defaultValue": {},
        "type": "Object"
      }
    },
    "triggers": {
      "When_a_message_is_received_in_a_queue_(peek-lock)": {
        "evaluatedRecurrence": {
          "frequency": "Second",
          "interval": 1
        },
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['servicebus']['connectionId']"
            }
          },
          "method": "get",
          "path": "/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/head/peek",
          "queries": {
            "queueType": "Main",
            "sessionId": "None"
          }
        },
        "recurrence": {
          "frequency": "Second",
          "interval": 1
        },
        "type": "ApiConnection"
      }
    }
  },
  "parameters": {}
}
