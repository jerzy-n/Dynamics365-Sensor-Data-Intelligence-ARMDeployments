{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Complete_the_message_in_a_queue": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['servicebus']['connectionId']"
            }
          },
          "method": "delete",
          "path": "/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/complete",
          "queries": {
            "lockToken": "@triggerBody()?['LockToken']",
            "queueType": "Main"
          }
        },
        "runAfter": {
          "Condition": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "Compose": {
        "inputs": "@json(decodeBase64(triggerBody()['ContentData']))",
        "runAfter": {},
        "type": "Compose"
      },
      "Condition": {
        "actions": {
          "Condition_2": {
            "actions": {
              "Send_message": {
                "inputs": {
                  "body": {
                    "ContentData": "@{base64(concat('{ \"notificationType\": \"Anomaly\", \"timestamp\": \"',outputs('Compose')?['processingTimestamp'],'\" }'))}"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['servicebus']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages",
                  "queries": {
                    "systemProperties": "None"
                  }
                },
                "runAfter": {},
                "type": "ApiConnection"
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@body('HTTP')?['isAnomaly']",
                    true
                  ]
                }
              ]
            },
            "runAfter": {},
            "type": "If"
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@outputs('HTTP')['statusCode']",
                200
              ]
            }
          ]
        },
        "runAfter": {
          "HTTP": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "HTTP": {
        "inputs": {
          "authentication": "@parameters('AnomalyDetectorIdentityAuthentication')",
          "body": "@outputs('Compose')",
          "headers": {
            "Content-Type": "application/json"
          },
          "method": "POST",
          "uri": "@{parameters('AnomalyDetectionEndpoint')}anomalydetector/v1.1/timeseries/last/detect"
        },
        "runAfter": {
          "Compose": [
            "Succeeded"
          ]
        },
        "type": "Http"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      },
      "AnomalyDetectionEndpoint": {
        "defaultValue": "",
        "type": "String"
      },
      "AnomalyDetectorIdentityAuthentication": {
        "defaultValue": {},
        "type": "Object"
      }
    },
    "triggers": {
      "When_a_message_is_received_in_a_queue_(peek-lock)": {
        "evaluatedRecurrence": {
          "frequency": "Second",
          "interval": 1
        },
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['servicebus']['connectionId']"
            }
          },
          "method": "get",
          "path": "/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/head/peek",
          "queries": {
            "queueType": "Main"
          }
        },
        "recurrence": {
          "frequency": "Second",
          "interval": 1
        },
        "type": "ApiConnection"
      }
    }
  },
  "parameters": {}
}
