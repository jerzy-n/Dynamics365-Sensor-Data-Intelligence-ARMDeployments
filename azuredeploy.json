{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "15063188491914995953"
    }
  },
  "parameters": {
    "supplyChainManagementEnvironmentURL": {
      "type": "string",
      "defaultValue": "http://contoso-uat.sandbox.operations.dynamics.com/",
      "metadata": {
        "description": "(Required) URL of the target Dynamics 365 Supply Chain Management environment (example: https://contoso-uat.sandbox.operations.dynamics.com/)"
      }
    },
    "existingIotHubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Resource group name of an Azure IoT Hub to reuse."
      }
    },
    "existingIotHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Resource name of an Azure IoT Hub to reuse."
      }
    },
    "customAnomalyDetectorDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Custom domain name for anomaly detector."
      }
    }
  },
  "variables": {
    "$fxv#0": "CREATE TABLE IotInput(\n    eventEnqueuedUtcTime datetime,\n    sensorId nvarchar(max),\n    value float\n  );\n\nCREATE TABLE AssetSensorAnomalyParamsReferenceInput(\n    SensorId nvarchar(max),\n    Scenario nvarchar(max),\n    IsSensorActiveForScenario nvarchar(max),\n    Sensitivity float\n  );\n\nSELECT\n  I.sensorId AS sensorId,\n  System.Timestamp() AS processingTimestamp,\n  Collect(UDF.pointToObject(I.eventEnqueuedUtcTime, I.value)) AS series\nINTO AnomalyDetectionOutput\nFROM IotInput I\nTIMESTAMP BY I.eventEnqueuedUtcTime\n-- JOIN AssetSensorAnomalyParamsReferenceInput R ON R.SensorId = I.sensorId\n-- WHERE R.IsSensorActiveForScenario = 'Yes'\nGROUP BY SlidingWindow(second, 12), I.sensorId\nHAVING COUNT() > 12\n\n\n",
    "$fxv#1": "function main(_timestamp, _value) {\r\n    \"use strict\"\r\n    return { timestamp: _timestamp, value: _value };\r\n}",
    "$fxv#2": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"Condition\": {\n        \"actions\": {\n          \"HTTP\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}data/AnomalyDetectionParams\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewAssetUnivariateAnomalyDetectionScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetUnivariateAnomalyDetectionScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetUnivariateAnomalyDetectionScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"CreateAssetDowntimeScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateAssetMaintenanceScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateAssetMonitorScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateEquipmentDowntimeScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateProductQualityScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createProductQualityScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateProductionJobDelayedScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"FilterAssetDowntimeScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetDowntime')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetMaintenanceScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetMaintenance')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetMonitorScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetMonitor')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetUnivariateAnomalyDetectionScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()?['Scenario'], 'AssetUnivariateAnomalyDetectionScenario')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterEquipmentDowntimeScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'MachineReportingStatus')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterProductQualityScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'ProductQualityValidation')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterProductionJobDelayedScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()?['Scenario'], 'ProductionJobDelayed')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"GetLatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetDowntimeScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetdowntime.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveAssetDowntimeScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetMaintenanceScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetmaintenance.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"NewAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetMonitorScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetmonitor.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveAssetMonitorScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetunivariateanomalydetection.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"Condition\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestEquipmentDowntimeScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/equipmentdowntime.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveEquipmentDowntimeScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestProductQualityScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/productquality.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveProductQualityScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestProductionJobDelayedScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/productionjobdelayed.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveProductionJobDelayedScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetScenarioSensorMappings\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n          \"method\": \"GET\",\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'\"\n        },\n        \"runAfter\": {},\n        \"type\": \"Http\"\n      },\n      \"IfActiveAssetDowntimeScenarioExists\": {\n        \"actions\": {\n          \"GetAssetSensorDowntimeThresholds\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/AssetSensorDowntimeThresholds\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseAssetSensorDowntimeThresholdsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetAssetSensorDowntimeThresholds')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"AssetNotRespondingThresholdMins\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"AssetNotRespondingThresholdMins\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetAssetSensorDowntimeThresholds\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewAssetDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newAssetDowntimeScenarioRefData\",\n              \"value\": \"@{body('ParseAssetSensorDowntimeThresholdsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseAssetSensorDowntimeThresholdsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyAssetDowntimeScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetDowntimeScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetDowntimeScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveAssetMonitorScenarioExists\": {\n        \"actions\": {\n          \"GetAssetSensorMonitorThresholds\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/AssetSensorMonitorThresholds\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseAssetSensorMonitorThresholdsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetAssetSensorMonitorThresholds')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"CounterLowerThresholdValue\": {\n                          \"type\": \"integer\"\n                        },\n                        \"CounterName\": {\n                          \"type\": \"string\"\n                        },\n                        \"CounterUpperThresholdValue\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"CounterLowerThresholdValue\",\n                        \"CounterUpperThresholdValue\",\n                        \"CounterName\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetAssetSensorMonitorThresholds\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewAssetMonitorScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newAssetMonitorScenarioRefData\",\n              \"value\": \"@{body('ParseAssetSensorMonitorThresholdsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseAssetSensorMonitorThresholdsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyAssetMonitorScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetMonitorScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetMonitorScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveEquipmentDowntimeScenarioExists\": {\n        \"actions\": {\n          \"GetSensorJobs\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobs\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorJobsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorJobs')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsJobInProgress\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"MachineNotReportingThreshold\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"MachineNotReportingThreshold\",\n                        \"IsJobInProgress\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorJobs\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newEquipmentDowntimeScenarioRefData\",\n              \"value\": \"@{body('ParseSensorJobsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorJobsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyEquipmentDowntimeScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newEquipmentDowntimeScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterEquipmentDowntimeScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveProductQualityScenarioExists\": {\n        \"actions\": {\n          \"GetSensorItemBatchAttributeMappings\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorItemBatchAttributeMappingsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorItemBatchAttributeMappings')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"AttributeName\": {\n                          \"type\": \"string\"\n                        },\n                        \"IsJobCompleted\": {\n                          \"type\": \"string\"\n                        },\n                        \"ItemNumber\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobLastRegistrationDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStartDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStopDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"MaximumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"MinimumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OptimalAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OrderId\": {\n                          \"type\": \"string\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"IsJobCompleted\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorItemBatchAttributeMappings\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newProductQualityScenarioRefData\",\n              \"value\": \"@{body('ParseSensorItemBatchAttributeMappingsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorItemBatchAttributeMappingsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetEmptyProductQualityScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newProductQualityScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterProductQualityScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveProductionJobDelayedScenarioExists\": {\n        \"actions\": {\n          \"GetSensorJobExecutions\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobExecutions\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorJobExecutionsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorJobExecutions')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsJobCompleted\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobLastRegistrationDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStartDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStopDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"OrderId\": {\n                          \"type\": \"string\"\n                        },\n                        \"ProcessingTimeInHours\": {\n                          \"type\": \"number\"\n                        },\n                        \"ProductionRateDeviationThreshold\": {\n                          \"type\": \"number\"\n                        },\n                        \"RequestedQuantity\": {\n                          \"type\": \"number\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"ProductionRateDeviationThreshold\",\n                        \"IsJobCompleted\",\n                        \"RequestedQuantity\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorJobExecutions\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewProductionJobDelayedScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newProductionJobDelayedScenarioRefData\",\n              \"value\": \"@{body('ParseSensorJobExecutionsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorJobExecutionsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetEmptyProductionJobDelayedScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newProductionJobDelayedScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterProductionJobDelayedScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetDowntimeScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetSensorDowntimeThresholdsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetSensorDowntimeThresholdsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateAssetSensorDowntimeThresholdsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetDowntimeScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetsensordowntimethresholds\",\n                \"name\": \"@{concat('assetsensordowntimethresholds', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetDowntimeScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetDowntimeScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetMaintenanceScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetMaintenanceScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetMaintenanceScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetmaintenancedata\",\n                \"name\": \"@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateLatestAssetMaintenanceScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetMaintenanceScenarioRefData')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios/\",\n                \"name\": \"assetmaintenance.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetMaintenanceScenarioRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"or\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetMaintenanceScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetMonitorScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetMonitorScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetSensorMonitorThresholdsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetmonitor.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetSensorMonitorThresholdsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateAssetSensorMonitorThresholdsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetMonitorScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetsensormonitorthresholds\",\n                \"name\": \"@{concat('assetsensormonitorthresholds', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetMonitorScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMonitorScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateUnivariateAnomalyDetectionJobsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetUnivariateAnomalyDetectionScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetunivariateanomalydetectionparams\",\n                \"name\": \"@{concat('assetunivariateanomalydetectionparams', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateUnivariateAnomalyDetectionScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateUnivariateAnomalyDetectionJobsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetunivariateanomalydetection.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateUnivariateAnomalyDetectionJobsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetUnivariateAnomalyDetectionScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetAssetUADScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetUADScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateEquipmentDowntimeScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorJobsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"equipmentdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorJobsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorJobsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newEquipmentDowntimeScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createEquipmentDowntimeScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateProductQualityScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorItemBatchAttributeMappingsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"productquality.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorItemBatchAttributeMappingsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorItemBatchAttributeMappingsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newProductQualityScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createProductQualityScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateProductionJobDelayedScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateProductionJobDelayedScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorJobExecutionMappingsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"productionjobdelayed.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorJobExecutionMappingsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorJobExecutionMappingsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newProductionJobDelayedScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobexecutions\",\n                \"name\": \"@{concat('sensorjobexecutions', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createProductionJobDelayedScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"LatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetDowntimeScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetDowntimeScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMaintenanceScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMaintenanceScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetMaintenanceScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMonitorScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMonitorScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetMonitorScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetUnivariateAnomalyDetectionScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestEquipmentDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestEquipmentDowntimeScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterEquipmentDowntimeScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductQualityScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductQualityScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterProductQualityScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductionJobDelayedScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductionJobDelayedScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterProductionJobDelayedScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetDowntimeScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetMaintenanceScenarioRefData\",\n              \"type\": \"string\",\n              \"value\": \"@{body('FilterAssetMaintenanceScenario')}\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetMaintenanceScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetMonitorScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetMonitorScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetUnivariateAnomalyDetectionScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newEquipmentDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateEquipmentDowntimeScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newProductQualityScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateProductQualityScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newProductionJobDelayedScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateProductionJobDelayedScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"ParseScenarioSensorMappings\": {\n        \"inputs\": {\n          \"content\": \"@body('GetScenarioSensorMappings')\",\n          \"schema\": {\n            \"properties\": {\n              \"value\": {\n                \"items\": {\n                  \"properties\": {\n                    \"IsSensorActiveForScenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"Scenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"SensorId\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"SensorId\",\n                    \"Scenario\",\n                    \"IsSensorActiveForScenario\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"runAfter\": {\n          \"GetScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ParseJson\"\n      },\n      \"SetAssetUADScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetDowntimeScenarioRefData'), variables('latestAssetDowntimeScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('latestAssetMaintenanceScenarioRefData'), variables('newAssetMaintenanceScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetMonitorScenarioRefData'), variables('latestAssetMonitorScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetUADScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetUnivariateAnomalyDetectionScenarioRefData'), variables('latestAssetUnivariateAnomalyDetectionScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newEquipmentDowntimeScenarioRefData'), variables('latestEquipmentDowntimeScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newProductQualityScenarioRefData'), variables('latestProductQualityScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newProductionJobDelayedScenarioRefData'), variables('latestProductionJobDelayedScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetDowntimeScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetDowntimeScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetDowntimeScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetDowntimeScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMaintenanceScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetMaintenanceScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMaintenanceScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetMaintenanceScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMonitorScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetMonitorScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMonitorScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetMonitorScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefData\",\n          \"value\": \"@{body('GetLatestUnivariateAnomalyDetectionScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestEquipmentDowntimeScenarioRefData\",\n          \"value\": \"@{body('GetLatestEquipmentDowntimeScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestEquipmentDowntimeScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestEquipmentDowntimeScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestProductQualityScenarioRefData\",\n          \"value\": \"@{body('GetLatestProductQualityScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestProductQualityScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestProductQualityScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestProductionJobDelayedScenarioRefData\",\n          \"value\": \"@{body('GetLatestProductionJobDelayedScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestProductionJobDelayedScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestProductionJobDelayedScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"outputs\": {},\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"DynamicsIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"EnvironmentUrl\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      },\n      \"StorageAccountName\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"Recurrence\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"recurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"type\": \"Recurrence\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "$fxv#3": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"Condition\": {\n        \"actions\": {\n          \"GetAssetUnivariateAnomalyDetectionParams\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}data/AnomalyDetectionParams\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"Parse_JSON\": {\n            \"inputs\": {\n              \"content\": \"@body('GetAssetUnivariateAnomalyDetectionParams')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsSensorActiveForScenario\": {\n                          \"type\": \"string\"\n                        },\n                        \"Scenario\": {\n                          \"type\": \"string\"\n                        },\n                        \"Sensitivity\": {\n                          \"type\": \"float\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"Scenario\",\n                        \"Sensitivity\",\n                        \"IsSensorActiveForScenario\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetAssetUnivariateAnomalyDetectionParams\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"Set_variable\": {\n            \"inputs\": {\n              \"name\": \"newAssetUnivariateAnomalyDetectionScenarioRefData\",\n              \"value\": \"@{body('Parse_JSON')?['value']}\"\n            },\n            \"runAfter\": {\n              \"Parse_JSON\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewAssetUnivariateAnomalyDetectionScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetUnivariateAnomalyDetectionScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetUnivariateAnomalyDetectionScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"CreateAssetDowntimeScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateAssetMaintenanceScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateAssetMonitorScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateEquipmentDowntimeScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateProductQualityScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createProductQualityScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"CreateProductionJobDelayedScenarioRefDataBlob\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n              \"type\": \"boolean\",\n              \"value\": \"@false\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"FilterAssetDowntimeScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetDowntime')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetMaintenanceScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetMaintenance')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetMonitorScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetMonitor')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterAssetUnivariateAnomalyDetectionScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()?['Scenario'], 'AssetUnivariateAnomalyDetectionScenario')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterEquipmentDowntimeScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'MachineReportingStatus')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterProductQualityScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'ProductQualityValidation')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterProductionJobDelayedScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()?['Scenario'], 'ProductionJobDelayed')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"GetLatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetDowntimeScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetdowntime.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveAssetDowntimeScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetMaintenanceScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetmaintenance.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"NewAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetMonitorScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetmonitor.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveAssetMonitorScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetunivariateanomalydetection.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"Condition\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestEquipmentDowntimeScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/equipmentdowntime.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveEquipmentDowntimeScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestProductQualityScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/productquality.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveProductQualityScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestProductionJobDelayedScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/productionjobdelayed.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"IfActiveProductionJobDelayedScenarioExists\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer')))}/content\",\n          \"queries\": {\n            \"inferContentType\": true\n          }\n        },\n        \"runAfter\": {\n          \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetScenarioSensorMappings\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n          \"method\": \"GET\",\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'\"\n        },\n        \"runAfter\": {},\n        \"type\": \"Http\"\n      },\n      \"IfActiveAssetDowntimeScenarioExists\": {\n        \"actions\": {\n          \"GetAssetSensorDowntimeThresholds\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/AssetSensorDowntimeThresholds\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseAssetSensorDowntimeThresholdsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetAssetSensorDowntimeThresholds')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"AssetNotRespondingThresholdMins\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"AssetNotRespondingThresholdMins\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetAssetSensorDowntimeThresholds\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewAssetDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newAssetDowntimeScenarioRefData\",\n              \"value\": \"@{body('ParseAssetSensorDowntimeThresholdsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseAssetSensorDowntimeThresholdsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyAssetDowntimeScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetDowntimeScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetDowntimeScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveAssetMonitorScenarioExists\": {\n        \"actions\": {\n          \"GetAssetSensorMonitorThresholds\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/AssetSensorMonitorThresholds\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseAssetSensorMonitorThresholdsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetAssetSensorMonitorThresholds')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"CounterLowerThresholdValue\": {\n                          \"type\": \"integer\"\n                        },\n                        \"CounterName\": {\n                          \"type\": \"string\"\n                        },\n                        \"CounterUpperThresholdValue\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"CounterLowerThresholdValue\",\n                        \"CounterUpperThresholdValue\",\n                        \"CounterName\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetAssetSensorMonitorThresholds\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewAssetMonitorScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newAssetMonitorScenarioRefData\",\n              \"value\": \"@{body('ParseAssetSensorMonitorThresholdsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseAssetSensorMonitorThresholdsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyAssetMonitorScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newAssetMonitorScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterAssetMonitorScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveEquipmentDowntimeScenarioExists\": {\n        \"actions\": {\n          \"GetSensorJobs\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobs\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorJobsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorJobs')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsJobInProgress\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"MachineNotReportingThreshold\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"MachineNotReportingThreshold\",\n                        \"IsJobInProgress\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorJobs\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newEquipmentDowntimeScenarioRefData\",\n              \"value\": \"@{body('ParseSensorJobsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorJobsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetNewEmptyEquipmentDowntimeScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newEquipmentDowntimeScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterEquipmentDowntimeScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveProductQualityScenarioExists\": {\n        \"actions\": {\n          \"GetSensorItemBatchAttributeMappings\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorItemBatchAttributeMappingsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorItemBatchAttributeMappings')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"AttributeName\": {\n                          \"type\": \"string\"\n                        },\n                        \"IsJobCompleted\": {\n                          \"type\": \"string\"\n                        },\n                        \"ItemNumber\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobLastRegistrationDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStartDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStopDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"MaximumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"MinimumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OptimalAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OrderId\": {\n                          \"type\": \"string\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"IsJobCompleted\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorItemBatchAttributeMappings\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newProductQualityScenarioRefData\",\n              \"value\": \"@{body('ParseSensorItemBatchAttributeMappingsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorItemBatchAttributeMappingsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetEmptyProductQualityScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newProductQualityScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterProductQualityScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveProductionJobDelayedScenarioExists\": {\n        \"actions\": {\n          \"GetSensorJobExecutions\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobExecutions\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"ParseSensorJobExecutionsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorJobExecutions')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsJobCompleted\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobLastRegistrationDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStartDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStopDateTime\": {\n                          \"format\": \"datetime\",\n                          \"type\": \"string\"\n                        },\n                        \"OrderId\": {\n                          \"type\": \"string\"\n                        },\n                        \"ProcessingTimeInHours\": {\n                          \"type\": \"number\"\n                        },\n                        \"ProductionRateDeviationThreshold\": {\n                          \"type\": \"number\"\n                        },\n                        \"RequestedQuantity\": {\n                          \"type\": \"number\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"ProductionRateDeviationThreshold\",\n                        \"IsJobCompleted\",\n                        \"RequestedQuantity\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorJobExecutions\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          },\n          \"SetNewProductionJobDelayedScenarioRefData\": {\n            \"inputs\": {\n              \"name\": \"newProductionJobDelayedScenarioRefData\",\n              \"value\": \"@{body('ParseSensorJobExecutionsRefData')?['value']}\"\n            },\n            \"runAfter\": {\n              \"ParseSensorJobExecutionsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"SetVariable\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"SetEmptyProductionJobDelayedScenarioRefData\": {\n              \"inputs\": {\n                \"name\": \"newProductionJobDelayedScenarioRefData\",\n                \"value\": \"[]\"\n              },\n              \"runAfter\": {},\n              \"type\": \"SetVariable\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterProductionJobDelayedScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"NewProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetDowntimeScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetSensorDowntimeThresholdsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetSensorDowntimeThresholdsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateAssetSensorDowntimeThresholdsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetDowntimeScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetsensordowntimethresholds\",\n                \"name\": \"@{concat('assetsensordowntimethresholds', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetDowntimeScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetDowntimeScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetMaintenanceScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetMaintenanceScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetMaintenanceScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetmaintenancedata\",\n                \"name\": \"@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateLatestAssetMaintenanceScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetMaintenanceScenarioRefData')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios/\",\n                \"name\": \"assetmaintenance.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetMaintenanceScenarioRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"or\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetMaintenanceScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetMonitorScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateAssetMonitorScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateAssetSensorMonitorThresholdsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetmonitor.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateAssetSensorMonitorThresholdsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateAssetSensorMonitorThresholdsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetMonitorScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetsensormonitorthresholds\",\n                \"name\": \"@{concat('assetsensormonitorthresholds', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetMonitorScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetMonitorScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateUnivariateAnomalyDetectionJobsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newAssetUnivariateAnomalyDetectionScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetunivariateanomalydetectionparams\",\n                \"name\": \"@{concat('assetunivariateanomalydetectionparams', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateUnivariateAnomalyDetectionScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateUnivariateAnomalyDetectionJobsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"assetunivariateanomalydetection.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateUnivariateAnomalyDetectionJobsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createAssetUnivariateAnomalyDetectionScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetAssetUADScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetUADScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateEquipmentDowntimeScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorJobsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"equipmentdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorJobsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorJobsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newEquipmentDowntimeScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createEquipmentDowntimeScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateProductQualityScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorItemBatchAttributeMappingsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"productquality.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorItemBatchAttributeMappingsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorItemBatchAttributeMappingsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newProductQualityScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createProductQualityScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfNeedsToCreateProductionJobDelayedScenarioRefDataBlob\": {\n        \"actions\": {\n          \"CreateProductionJobDelayedScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('CreateSensorJobExecutionMappingsBlob')?['Path']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"productionjobdelayed.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateSensorJobExecutionMappingsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateSensorJobExecutionMappingsBlob\": {\n            \"inputs\": {\n              \"body\": \"@variables('newProductionJobDelayedScenarioRefData')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobexecutions\",\n                \"name\": \"@{concat('sensorjobexecutions', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@variables('createProductionJobDelayedScenarioRefDataBlob')\",\n                \"@true\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"SetCreateProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ],\n          \"SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged\": [\n            \"Succeeded\",\n            \"Skipped\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"LatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetDowntimeScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetDowntimeScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMaintenanceScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMaintenanceScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetMaintenanceScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMonitorScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMonitorScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetMonitorScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterAssetUnivariateAnomalyDetectionScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestEquipmentDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestEquipmentDowntimeScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterEquipmentDowntimeScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductQualityScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductQualityScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterProductQualityScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductionJobDelayedScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"LatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"LatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestProductionJobDelayedScenarioRefDataPointer\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterProductionJobDelayedScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetDowntimeScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetMaintenanceScenarioRefData\",\n              \"type\": \"string\",\n              \"value\": \"@{body('FilterAssetMaintenanceScenario')}\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetMaintenanceScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetMonitorScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetMonitorScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetUnivariateAnomalyDetectionScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateAssetUnivariateAnomalyDetectionScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newEquipmentDowntimeScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateEquipmentDowntimeScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newProductQualityScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateProductQualityScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"NewProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newProductionJobDelayedScenarioRefData\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"CreateProductionJobDelayedScenarioRefDataBlob\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"ParseScenarioSensorMappings\": {\n        \"inputs\": {\n          \"content\": \"@body('GetScenarioSensorMappings')\",\n          \"schema\": {\n            \"properties\": {\n              \"value\": {\n                \"items\": {\n                  \"properties\": {\n                    \"IsSensorActiveForScenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"Scenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"SensorId\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"SensorId\",\n                    \"Scenario\",\n                    \"IsSensorActiveForScenario\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"runAfter\": {\n          \"GetScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ParseJson\"\n      },\n      \"SetAssetUADScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetDowntimeScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetDowntimeScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetDowntimeScenarioRefData'), variables('latestAssetDowntimeScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetMaintenanceScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('latestAssetMaintenanceScenarioRefData'), variables('newAssetMaintenanceScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetMonitorScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetMonitorScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetMonitorScenarioRefData'), variables('latestAssetMonitorScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetUADScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateAssetUnivariateAnomalyDetectionScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createAssetUnivariateAnomalyDetectionScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newAssetUnivariateAnomalyDetectionScenarioRefData'), variables('latestAssetUnivariateAnomalyDetectionScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createEquipmentDowntimeScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newEquipmentDowntimeScenarioRefData'), variables('latestEquipmentDowntimeScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createProductQualityScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newProductQualityScenarioRefData'), variables('latestProductQualityScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@true\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged\": {\n        \"inputs\": {\n          \"name\": \"createProductionJobDelayedScenarioRefDataBlob\",\n          \"value\": \"@not(equals(variables('newProductionJobDelayedScenarioRefData'), variables('latestProductionJobDelayedScenarioRefData')))\"\n        },\n        \"runAfter\": {\n          \"SetLatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetDowntimeScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetDowntimeScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetDowntimeScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetDowntimeScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMaintenanceScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetMaintenanceScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMaintenanceScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMaintenanceScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetMaintenanceScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMonitorScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMonitorScenarioRefData\",\n          \"value\": \"@{body('GetLatestAssetMonitorScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetMonitorScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetMonitorScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetMonitorScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMonitorScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefData\",\n          \"value\": \"@{body('GetLatestUnivariateAnomalyDetectionScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestUnivariateAnomalyDetectionScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestAssetUnivariateAnomalyDetectionScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestEquipmentDowntimeScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestEquipmentDowntimeScenarioRefData\",\n          \"value\": \"@{body('GetLatestEquipmentDowntimeScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestEquipmentDowntimeScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestEquipmentDowntimeScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestEquipmentDowntimeScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestEquipmentDowntimeScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductQualityScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestProductQualityScenarioRefData\",\n          \"value\": \"@{body('GetLatestProductQualityScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductQualityScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestProductQualityScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestProductQualityScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductQualityScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductionJobDelayedScenarioRefData\": {\n        \"inputs\": {\n          \"name\": \"latestProductionJobDelayedScenarioRefData\",\n          \"value\": \"@{body('GetLatestProductionJobDelayedScenarioRefData')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      },\n      \"SetLatestProductionJobDelayedScenarioRefDataPointer\": {\n        \"inputs\": {\n          \"name\": \"latestProductionJobDelayedScenarioRefDataPointer\",\n          \"value\": \"@{body('GetLatestProductionJobDelayedScenarioRefDataPointer')}\"\n        },\n        \"runAfter\": {\n          \"GetLatestProductionJobDelayedScenarioRefDataPointer\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"SetVariable\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"outputs\": {},\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"DynamicsIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"EnvironmentUrl\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      },\n      \"StorageAccountName\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"Recurrence\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"recurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"type\": \"Recurrence\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "$fxv#4": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"Complete_Insight_message_in_queue\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"delete\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages/complete\",\n          \"queries\": {\n            \"lockToken\": \"@triggerBody()?['LockToken']\",\n            \"queueType\": \"Main\",\n            \"sessionId\": \"\"\n          }\n        },\n        \"runAfter\": {\n          \"Post_Notification\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"Compose_Notification_object\": {\n        \"inputs\": {\n          \"Id\": \"@{variables('NotificationGUID')}\",\n          \"NotificationRaisedDateTime\": \"@{body('Parse_Insight')?['timestamp']}\",\n          \"Payload\": \"@decodeBase64(triggerBody()?['ContentData'])\",\n          \"Type\": \"@{body('Parse_Insight')?['notificationType']}\"\n        },\n        \"runAfter\": {\n          \"Notification_GUID\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Compose\"\n      },\n      \"Notification_GUID\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"NotificationGUID\",\n              \"type\": \"string\",\n              \"value\": \"@triggerBody()?['LockToken']\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"Parse_Insight\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"Parse_Insight\": {\n        \"inputs\": {\n          \"content\": \"@decodeBase64(triggerBody()?['ContentData'])\",\n          \"schema\": {\n            \"properties\": {\n              \"notificationType\": {\n                \"type\": \"string\"\n              },\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"runAfter\": {},\n        \"type\": \"ParseJson\"\n      },\n      \"Post_Notification\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n          \"body\": \"@outputs('Compose_Notification_object')\",\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"method\": \"POST\",\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/OperationsNotifications\"\n        },\n        \"runAfter\": {\n          \"Compose_Notification_object\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Http\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"DynamicsIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"EnvironmentUrl\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"When_Insight_is_added_to_outbound_queue_(peek-lock)\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 30\n        },\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages/head/peek\",\n          \"queries\": {\n            \"queryType\": \"Main\"\n          }\n        },\n        \"recurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 30\n        },\n        \"type\": \"ApiConnection\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "$fxv#5": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"Complete_the_message_in_a_queue\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"delete\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/complete\",\n          \"queries\": {\n            \"lockToken\": \"@triggerBody()?['LockToken']\",\n            \"queueType\": \"Main\"\n          }\n        },\n        \"runAfter\": {\n          \"Condition\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"Compose\": {\n        \"inputs\": \"@json(decodeBase64(triggerBody()['ContentData']))\",\n        \"runAfter\": {},\n        \"type\": \"Compose\"\n      },\n      \"Condition\": {\n        \"actions\": {\n          \"Condition_2\": {\n            \"actions\": {\n              \"Send_message\": {\n                \"inputs\": {\n                  \"body\": {\n                    \"ContentData\": \"@{base64(concat('{ \\\"notificationType\\\": \\\"Anomaly\\\", \\\"timestamp\\\": \\\"',outputs('Compose')?['processingTimestamp'],'\\\" }'))}\"\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"post\",\n                  \"path\": \"/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages\",\n                  \"queries\": {\n                    \"systemProperties\": \"None\"\n                  }\n                },\n                \"runAfter\": {},\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"expression\": {\n              \"and\": [\n                {\n                  \"equals\": [\n                    \"@body('HTTP')?['isAnomaly']\",\n                    true\n                  ]\n                }\n              ]\n            },\n            \"runAfter\": {},\n            \"type\": \"If\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@outputs('HTTP')['statusCode']\",\n                200\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"HTTP\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"HTTP\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('AnomalyDetectorIdentityAuthentication')\",\n          \"body\": \"@outputs('Compose')\",\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"method\": \"POST\",\n          \"uri\": \"@{parameters('AnomalyDetectionEndpoint')}anomalydetector/v1.1/timeseries/last/detect\"\n        },\n        \"runAfter\": {\n          \"Compose\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Http\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"outputs\": {},\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"AnomalyDetectionEndpoint\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      },\n      \"AnomalyDetectorIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      }\n    },\n    \"triggers\": {\n      \"When_a_message_is_received_in_a_queue_(peek-lock)\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 1\n        },\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('anomaly-detection-queue'))}/messages/head/peek\",\n          \"queries\": {\n            \"queueType\": \"Main\"\n          }\n        },\n        \"recurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 1\n        },\n        \"type\": \"ApiConnection\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "resourcesLocation": "[resourceGroup().location]",
    "uniqueIdentifier": "[uniqueString(resourceGroup().id)]",
    "createNewIotHub": "[empty(parameters('existingIotHubName'))]",
    "azureServiceBusDataReceiverRoleId": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
    "azureServiceBusDataSenderRoleId": "69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
    "azureStorageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
    "azureCognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
    "trimmedEnvironmentUrl": "[trim(parameters('supplyChainManagementEnvironmentURL'))]",
    "streamScenarioJobs": [],
    "streamAnomalyDetectionJobs": [
      {
        "scenario": "asset-univariate-anomaly-detection",
        "referenceDataName": "AssetSensorAnomalyParamsReferenceInput",
        "referencePathPattern": "assetunivariateanomalydetectionparams/assetunivariateanomalydetectionparams{date}T{time}.json",
        "query": "[variables('$fxv#0')]",
        "udfScript": "[variables('$fxv#1')]",
        "anomalyDetectionJob": true
      }
    ],
    "deployAnomalyDetectionResources": "[greater(length(variables('streamAnomalyDetectionJobs')), 0)]",
    "allStreamScenarioJobs": "[concat(variables('streamScenarioJobs'), variables('streamAnomalyDetectionJobs'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue', 'AsaSendRule')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue')]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
      "properties": {
        "enablePartitioning": false,
        "enableBatchedOperations": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue')]",
      "properties": {
        "enablePartitioning": false,
        "enableBatchedOperations": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
      "kind": "gitHubHostedTemplate",
      "properties": {
        "repoUrl": "https://github.com/microsoft/Dynamics365-Sensor-Data-Intelligence-Asa2Resp",
        "branch": "main",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'appDeploymentWait')]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "redisVersion": "6",
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 0
        }
      }
    },
    {
      "condition": "[variables('createNewIotHub')]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-07-02",
      "name": "[format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "B1",
        "capacity": 1
      },
      "properties": {}
    },
    {
      "copy": {
        "name": "iotHubConsumerGroups",
        "count": "[length(variables('allStreamScenarioJobs'))]"
      },
      "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
      "apiVersion": "2021-07-02",
      "name": "[format('{0}/events/{1}', if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName')), variables('allStreamScenarioJobs')[copyIndex()].scenario)]",
      "properties": {
        "name": "[variables('allStreamScenarioJobs')[copyIndex()].scenario]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {},
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "httpsOnly": true,
        "siteConfig": {
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "netFrameworkVersion": "v6.0",
          "functionAppScaleLimit": 10,
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "asa2respfunction"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "RedisConnectionString",
              "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').hostName, reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').sslPort, listKeys(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').primaryKey)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "appDeploymentWait",
      "location": "[variables('resourcesLocation')]",
      "kind": "AzurePowerShell",
      "properties": {
        "retentionInterval": "PT1H",
        "azPowerShellVersion": "7.3.2",
        "scriptContent": "Start-Sleep -Seconds 30"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsJobs",
        "count": "[length(variables('allStreamScenarioJobs'))]"
      },
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[copyIndex()].scenario, variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "compatibilityLevel": "1.2",
        "outputStartMode": "JobStartTime",
        "inputs": [
          {
            "name": "IotInput",
            "properties": {
              "type": "Stream",
              "datasource": {
                "type": "Microsoft.Devices/IotHubs",
                "properties": {
                  "iotHubNamespace": "[if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName'))]",
                  "sharedAccessPolicyName": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].keyName, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].keyName)]",
                  "sharedAccessPolicyKey": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].primaryKey, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].primaryKey)]",
                  "endpoint": "messages/events",
                  "consumerGroupName": "[variables('allStreamScenarioJobs')[copyIndex()].scenario]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "[variables('allStreamScenarioJobs')[copyIndex()].referenceDataName]",
            "properties": {
              "type": "Reference",
              "datasource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "authenticationMode": "Msi",
                  "storageAccounts": [
                    {
                      "accountName": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
                    }
                  ],
                  "container": "sensorintelligencereferencedata",
                  "pathPattern": "[variables('allStreamScenarioJobs')[copyIndex()].referencePathPattern]",
                  "dateFormat": "yyyy-MM-dd",
                  "timeFormat": "HH-mm"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "outputs": "[if(not(contains(variables('allStreamScenarioJobs')[copyIndex()], 'anomalyDetectionJob')), createArray(createObject('name', 'MetricOutput', 'properties', createObject('datasource', createObject('type', 'Microsoft.AzureFunction', 'properties', createObject('functionAppName', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'functionName', 'AzureStreamAnalyticsToRedis', 'apiKey', listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))), '2021-02-01').functionKeys.default)))), createObject('name', 'NotificationOutput', 'properties', createObject('datasource', createObject('type', 'Microsoft.ServiceBus/Queue', 'properties', createObject('serviceBusNamespace', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'queueName', 'outbound-insights', 'authenticationMode', 'ConnectionString', 'sharedAccessPolicyName', listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').keyName, 'sharedAccessPolicyKey', listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').primaryKey)), 'serialization', createObject('type', 'Json', 'properties', createObject('encoding', 'UTF8', 'format', 'Array'))))), createArray(createObject('name', 'MetricOutput', 'properties', createObject('datasource', createObject('type', 'Microsoft.AzureFunction', 'properties', createObject('functionAppName', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'functionName', 'AzureStreamAnalyticsToRedis', 'apiKey', listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))), '2021-02-01').functionKeys.default)))), createObject('name', 'AnomalyDetectionOutput', 'properties', createObject('datasource', createObject('type', 'Microsoft.ServiceBus/Queue', 'properties', createObject('serviceBusNamespace', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'queueName', 'anomaly-detection-queue', 'authenticationMode', 'ConnectionString', 'sharedAccessPolicyName', listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue', 'AsaSendRule'), '2021-06-01-preview').keyName, 'sharedAccessPolicyKey', listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue', 'AsaSendRule'), '2021-06-01-preview').primaryKey)), 'serialization', createObject('type', 'Json', 'properties', createObject('encoding', 'UTF8', 'format', 'Array'))))))]",
        "transformation": {
          "name": "input2output",
          "properties": {
            "query": "[variables('allStreamScenarioJobs')[copyIndex()].query]"
          }
        },
        "functions": "[if(contains(variables('allStreamScenarioJobs')[copyIndex()], 'anomalyDetectionJob'), createArray(createObject('name', 'pointToObject', 'properties', createObject('type', 'Scalar', 'properties', createObject('binding', createObject('type', 'Microsoft.StreamAnalytics/JavascriptUdf', 'properties', createObject('script', variables('allStreamScenarioJobs')[copyIndex()].udfScript)), 'inputs', createArray(createObject('dataType', 'datetime', 'isConfigurationParameter', false()), createObject('dataType', 'float', 'isConfigurationParameter', false())), 'output', createObject('dataType', 'record'))))), createArray())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue', 'AsaSendRule')]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]"
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2022-12-01",
      "name": "[format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "F0"
      },
      "kind": "AnomalyDetector",
      "properties": {
        "apiProperties": {
          "statisticsEnabled": false
        },
        "customSubDomainName": "[if(equals(length(parameters('customAnomalyDetectorDomainName')), 0), format('msdyn-iiot-anomaly-detector-{0}', variables('uniqueIdentifier')), parameters('customAnomalyDetectorDomainName'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataReceiverRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from Service Bus queues.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} insert blobs into the reference data Storage Account.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsBlobDataContributorRoleAssignment",
        "count": "[length(range(0, length(variables('streamScenarioJobs'))))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), '2021-10-01-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from the reference data Storage Account. Stream Analytics needs Contributor role to function, even if it only reads.', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('allStreamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {
            "namespaceEndpoint": {
              "value": "[replace(replace(reference(resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))), '2021-06-01-preview').serviceBusEndpoint, 'https://', 'sb://'), ':443', '')]"
            }
          }
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-storageaccountbusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {}
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdata-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#2')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "DynamicsIdentityAuthentication": {
            "value": {
              "audience": "00000015-0000-0000-c000-000000000000",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
              "type": "ManagedServiceIdentity"
            }
          },
          "EnvironmentUrl": {
            "value": "[variables('trimmedEnvironmentUrl')]"
          },
          "StorageAccountName": {
            "value": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdatacleanup-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#3')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "StorageAccountName": {
            "value": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-notification-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#4')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "servicebus",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity",
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                  }
                }
              }
            }
          },
          "DynamicsIdentityAuthentication": {
            "value": {
              "audience": "00000015-0000-0000-c000-000000000000",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
              "type": "ManagedServiceIdentity"
            }
          },
          "EnvironmentUrl": {
            "value": "[variables('trimmedEnvironmentUrl')]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "definition": "[json(variables('$fxv#5')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "servicebus",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "AnomalyDetectorIdentityAuthentication": {
            "value": {
              "audience": "https://cognitiveservices.azure.com/",
              "type": "ManagedServiceIdentity"
            }
          },
          "AnomalyDetectionEndpoint": {
            "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier'))), '2022-12-01').endpoint]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights'), resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataSenderRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataSenderRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))), '2019-05-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} send messages to Service Bus queues.', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue'), resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataReceiverRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))), '2019-05-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read messages from Service Bus queues.', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'anomaly-detection-queue')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "condition": "[variables('deployAnomalyDetectionResources')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureCognitiveServicesUserRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureCognitiveServicesUserRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier'))), '2019-05-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} use Anomaly Detector endpoint', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', format('msdyn-iiot-sdi-anomaly-detector-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Logic/workflows', format('msdyn-iiot-sdi-uad-last-point-{0}', variables('uniqueIdentifier')))]"
      ]
    }
  ],
  "outputs": {
    "applicationId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), '2018-11-30').clientId]",
      "metadata": {
        "description": "AAD Application ID to allowlist in Dynamics"
      }
    }
  }
}